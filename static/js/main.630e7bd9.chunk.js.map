{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","error","isLoaded","items","local","live","isLogged","from","toDate","onChange","bind","fetch","this","then","res","json","result","setState","console","log","to","e","target","name","value","resetData","A","B","i","length","partner","message","className","placeholder","type","id","scope","map","item","index","key","data","time","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.630e7bd9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: [],\n      local:\"http://www.localhost/test-server/\",\n      live:\"http://egnito.com/app/\",\n      isLogged: true,\n      from:'0000-01-01',\n      toDate:'2020-07-29',\n    };\n    this.onChange = this.onChange.bind(this);\n  }\n  \n\n  componentDidMount() {\n    fetch(this.state.live+\"api?category=logs&partnerId=A&todate=\"+this.state.toDate+\"&from=\"+this.state.from)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            items: result.items,\n          });\n          console.log(result.items);\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error,\n          });\n        }\n      );\n  }\n\n  resetData(to,from){\n    console.log(\"date Chnaged\")\n    fetch(this.state.live+\"api?category=logs&partnerId=A&toDate=\"+to+\"&from=\"+from)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            items: result.items,\n          });\n          console.log(result)\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error,\n          });\n        }\n      );\n  }\n  onChange(e) {\n    this.setState(\n      {\n        [e.target.name]:e.target.value\n        },() => {\n        console.log(this.state);\n        this.resetData(this.state.toDate,this.state.from)\n    });\n    console.log(\"State :\"+this.state)      \n  }\n  render() {\n\n\nconst { error, isLoaded, items } = this.state;\nlet A=0;\nlet B=0;\nfor (let i = 0; i < items.length; i++) {\n  console.log(items[i].partner)\n    if(items[i].partner===\"A\"){\n    A++;\n  }else if(items[i].partner===\"B\"){\n    B++;\n  }\n}\n\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div className=\"preloader\" />;\n    } else {\n      return (\n        <div className=\"App\">\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <main className=\"col-md-9 mx-auto col-lg-10 px-md-4\">\n              \n\n\n              \n              \n              <div className=\"row mt-5\">\n              <div className=\"col-xl-3 col-lg-6 mx-auto\">\n                <div className=\"card card-inverse card-primary \">\n                  <div className=\"card-block bg-primary px-3 py-3\">\n                    <div className=\"rotate\">\n                      <i className=\"fa fa-user fa-5x\"></i>\n                    </div>\n                    <h6 className=\"text-light\">Total</h6>\n                    <h1 className=\"display-1 text-light\">{items.length}</h1>\n                  </div>\n                </div>\n             </div>\n\n             <div className=\"col-xl-3 col-lg-6 mx-auto\">\n                <div className=\"card card-inverse card-primary \">\n                  <div className=\"card-block bg-primary px-3 py-3\">\n                    <div className=\"rotate\">\n                      <i className=\"fa fa-user fa-5x\"></i>\n                    </div>\n                    <h6 className=\"text-light\">Partner A</h6>\n                    <h1 className=\"display-1 text-light\">{A}</h1>\n                  </div>\n                </div>\n             </div>\n             <div className=\"col-xl-3 col-lg-6 mx-auto\">\n                <div className=\"card card-inverse card-primary \">\n                  <div className=\"card-block bg-primary px-3 py-3\">\n                    <div className=\"rotate\">\n                      <i className=\"fa fa-user fa-5x\"></i>\n                    </div>\n                    <h6 className=\"text-light\">Partner B</h6>\n                    <h1 className=\"display-1 text-light\">{B}</h1>\n                  </div>\n                </div>\n             </div>\n              </div>\n              <div className=\"row text-center mt-3\">\n                <div className=\"col-md-2 ml-auto form-inline\">\n                <label className=\"text-info\">From Date</label>\n                  <input\n                  value=\"\"\n                  placeholder=\"From Date\"\n                  name=\"from\"\n                  onChange={(e) => {\n                    this.onChange(e);\n                  }}\n                   className=\"form-control text-primary my-1\"  type=\"date\" />\n                </div>\n                <div className=\"col-md-2 mr-auto form-inline\">\n                  <label className=\"text-info\">To Date</label>\n                  <input \n                  value=\"\"\n                  placeholder=\"To Date\"\n                  name=\"toDate\"\n                  onChange={(e) => {\n                    this.onChange(e);\n                  }}\n                      className=\"form-control text-primary my-1\"  type=\"date\" />\n                </div>\n              </div>\n\n\n              <h3 className=\"mt-5 mb-3 text-center text-primary\" >Request Logs</h3>\n              <div className=\"table-responsive col-md-9 mx-auto\">\n                <table className=\"table table-bordered table-hover\" id=\"datatable\">\n                  <thead className=\"thead-dark\">\n                    <tr>\n                      <th scope=\"col\">S.No</th>\n                      <th scope=\"col\">Partner Id</th>\n                      <th scope=\"col\">Triggers</th>\n                      <th scope=\"col\">Date</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                  {items.map((item,index) => (\n                    <tr key={item.id}>\n                      <td>{index+1}</td>\n                      <td>{item.partner}</td>\n                      <td>{item.data}</td>\n                      <td>{item.time}</td>\n                      \n                    </tr>\n                    ))}\n                    \n                    \n                    \n                  </tbody>\n                </table>\n              </div>\n\n              <div className=\"row\">\n                    <div className=\"col-md-6 mx-auto\">\n                      <h2 className=\"text-center\"> Api Info</h2>\n                      <table className=\"table table-bordered table-hover\" id=\"datatable\">\n                  <thead className=\"thead-dark\">\n                    <tr>\n                      <th scope=\"col\">S.No</th>\n                      <th scope=\"col\">parameter</th>\n                      <th scope=\"col\">data</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr >\n                      <td>1</td>\n                      <td>category*</td>\n                      <td>table name</td>                      \n                    </tr>\n                    <tr >\n                      <td>2</td>\n                      <td>id</td>\n                      <td>ID of Data row</td>                      \n                    </tr>\n                    <tr >\n                      <td>4</td>\n                      <td>partnerId*</td>\n                      <td>Partner ID</td>                      \n                    </tr>                          \n                    \n                    \n                  </tbody>\n                </table>\n                </div>\n                \n              </div>\n              <div className=\"row\">\n                    <div className=\"col-md-12\">\n                      <h3> Examples</h3>\n                      <p>http://egnito.com/app/api?partnerId=B&category=employees</p>\n                      <p>http://egnito.com/app/api?partnerId=B&category=employees&id=100</p>\n                    </div>\n                    <h4>Available tables :</h4>\n                    <p>companies,countries,departments,employees,jobs,locations,regions,users,dependents</p>\n                    <h4>Asumptions :Only Partner A and B are active</h4>\n                    \n              </div>\n\n            </main>\n            </div>\n         </div>\n        </div>\n      );\n    }\n  }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}